{"version":3,"sources":["mui/adorned-input.tsx","scenario-detail.tsx","calc/kelly-calc.ts","utility.ts","kelly-editor.tsx","sample-data.ts","scenario-chooser.tsx","App.tsx","index.tsx"],"names":["counter","InputPercent","title","label","labelProps","inputProps","useState","count","id","FormControl","InputLabel","htmlFor","Input","type","endAdornment","InputAdornment","position","scenarioDataFields","numericScenarioDataFields","ScenarioDetail","React","memo","name","description","probabilityPct","expectedReturnPct","useCustomStyling","showErrors","updateCallback","handleChange","event","fieldName","target","value","includes","convert","parseFloat","console","error","expectedReturnPctError","probabilityPctError","numOrBlank","n","_","round","className","classNames","required","onChange","TextField","trim","AddCircleOutline","onClick","calcKellyBetSize","odds","yCalc","x","sum","map","o","probability","Math","log","payoffReturn","graph","range","getMaxIdx","max","indexOf","maxIdx","direction","y","i","Infinity","graph2","decimalMaxIdx","betPct","expectedPayoff","pow","E","replaceItem","items","index","scenario","start","slice","end","require","w","window","React2","React1","getTotalProbabilityPct","scenarios","s","validateSum100Pct","abs","validate","every","length","KellyEditor","startScenario","showHeader","saveCallback","setScenarios","kellyResult","setKellyResult","canCalc","setCanCalc","setShowErrors","startCount","setStartCount","useEffect","tryCalculate","updateScenario","updateField","newScenarios","newKellyResult","totalProbabilityPct","Button","variant","color","Typography","scenarioDetails","bind","sampleScenarioSummaries","scenarioDetailsUi","data","TableContainer","component","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","d","ScenarioChooser","summaries","selectedCallback","selectedIndex","isSelecting","setIsSelecting","handleClick","toggleSelecting","SingleSummaryUi","summary","disabled","scope","selected","App","setSummaries","selectedSummaryIdx","setSelectedSummaryIdx","document","fullSummary","Date","toLocaleString","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e6f5afec.chunk.js","sourcesContent":["import {\r\n  InputLabel,\r\n  Input,\r\n  InputAdornment,\r\n  FormControl,\r\n} from '@material-ui/core';\r\nimport React, { ComponentProps, useState } from 'react';\r\n\r\ninterface Props {\r\n  title?: string;\r\n  label: string;\r\n  labelProps: Partial<ComponentProps<typeof InputLabel>>;\r\n  inputProps: Partial<ComponentProps<typeof Input>>;\r\n}\r\n\r\nlet counter = 0;\r\n\r\n// other types like dollars are possible with some minor coding\r\n// so not default\r\nexport const InputPercent = ({\r\n  title,\r\n  label,\r\n  labelProps,\r\n  inputProps,\r\n}: Props) => {\r\n  const [count, _] = useState(++counter);\r\n  const id = `mui-pct-${count}`;\r\n\r\n  return (\r\n    <FormControl>\r\n      <span title={title}>\r\n        <InputLabel\r\n          htmlFor={id}\r\n          // error={probabilityPctError}\r\n          {...labelProps}\r\n        >\r\n          {label}\r\n        </InputLabel>\r\n        <Input\r\n          id={id}\r\n          type=\"number\"\r\n          {...inputProps}\r\n          // value={numOrBlank(probabilityPct)}\r\n          // error={probabilityPctError}\r\n          // onChange={handleChange}\r\n          endAdornment={\r\n            <InputAdornment position=\"end\">\r\n              %\r\n            </InputAdornment>\r\n          }\r\n        />\r\n      </span>\r\n    </FormControl>\r\n  );\r\n};\r\n","import {\r\n  FormControl,\r\n  Input,\r\n  InputAdornment,\r\n  InputLabel,\r\n  TextField,\r\n} from '@material-ui/core';\r\nimport classNames from 'classnames';\r\nimport React from 'react';\r\n\r\nimport { AddCircleOutline } from '@material-ui/icons';\r\nimport _ from 'lodash';\r\nimport { InputPercent } from './mui/adorned-input';\r\n\r\nexport interface ScenarioData {\r\n  name?: string;\r\n  description?: string;\r\n  probabilityPct?: number;\r\n  expectedReturnPct?: number;\r\n}\r\nconst scenarioDataFields: readonly (keyof ScenarioData)[] = [\r\n  'name',\r\n  'description',\r\n  'probabilityPct',\r\n  'expectedReturnPct',\r\n] as const;\r\n\r\nexport const numericScenarioDataFields: readonly (keyof ScenarioData)[] = [\r\n  'probabilityPct',\r\n  'expectedReturnPct',\r\n] as const;\r\n\r\nexport interface Props extends ScenarioData {\r\n  useCustomStyling?: boolean;\r\n  showErrors: boolean;\r\n  updateCallback: (\r\n    p: ScenarioData | null,\r\n    field: keyof ScenarioData | null\r\n  ) => void;\r\n}\r\n\r\nconst ScenarioDetail = React.memo(\r\n  ({\r\n    name,\r\n    description,\r\n    probabilityPct,\r\n    expectedReturnPct,\r\n    useCustomStyling,\r\n    showErrors,\r\n    updateCallback,\r\n  }: Props) => {\r\n    const handleChange = (\r\n      event: React.ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n      const fieldName = event.target\r\n        .name as keyof ScenarioData;\r\n      const value = event.target.value;\r\n\r\n      if (scenarioDataFields.includes(fieldName)) {\r\n        const convert = numericScenarioDataFields.includes(\r\n          fieldName\r\n        );\r\n\r\n        updateCallback(\r\n          {\r\n            name,\r\n            description,\r\n            probabilityPct,\r\n            expectedReturnPct,\r\n            [fieldName]: convert\r\n              ? parseFloat(value)\r\n              : value,\r\n          },\r\n          fieldName\r\n        );\r\n      } else {\r\n        console.error(\r\n          `unexpected field name: ${fieldName}`\r\n        );\r\n      }\r\n    };\r\n    const expectedReturnPctError =\r\n      showErrors && typeof expectedReturnPct !== 'number';\r\n\r\n    const probabilityPctError =\r\n      showErrors && typeof probabilityPct !== 'number';\r\n\r\n    const numOrBlank = (n: number | undefined) =>\r\n      typeof n === 'number' ? _.round(n, 1) : '';\r\n    return (\r\n      <div\r\n        className={classNames('scenario', {\r\n          'lib-styling': !useCustomStyling,\r\n        })}\r\n      >\r\n        <InputPercent\r\n          title=\"likelihood of occurence from 0 - 100\"\r\n          label=\"Prob Pct*\"\r\n          labelProps={{ error: probabilityPctError }}\r\n          inputProps={{\r\n            name: 'probabilityPct',\r\n            className: 'percent-input',\r\n            required: true,\r\n            value: numOrBlank(probabilityPct),\r\n            error: probabilityPctError,\r\n            onChange: handleChange,\r\n          }}\r\n        />\r\n        <FormControl>\r\n          <span title=\"Expected Payoff Pct: gain/loss expected for this scenario&#10;100 = doubling/getting back amount bet twice.&#10;0 = no gain/loss -- just return of amount bet&#10;-100 = losing amount bet.\">\r\n            <InputLabel error={expectedReturnPctError}>\r\n              Exp Gain*\r\n            </InputLabel>\r\n            <Input\r\n              name=\"expectedReturnPct\"\r\n              className=\"percent-input\"\r\n              required\r\n              type=\"number\"\r\n              value={numOrBlank(expectedReturnPct)}\r\n              error={expectedReturnPctError}\r\n              onChange={handleChange}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  %\r\n                </InputAdornment>\r\n              }\r\n            />\r\n          </span>\r\n        </FormControl>\r\n        <TextField\r\n          label=\"Name\"\r\n          className=\"name\"\r\n          name=\"name\"\r\n          required\r\n          value={name || ''}\r\n          error={\r\n            showErrors &&\r\n            (typeof name !== 'string' || !name.trim())\r\n          }\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          label=\"Description\"\r\n          className=\"description\"\r\n          name=\"description\"\r\n          value={description || ''}\r\n          onChange={handleChange}\r\n        />\r\n        <span\r\n          title=\"delete scenario\"\r\n          className=\"delete-scenario\"\r\n        >\r\n          <AddCircleOutline\r\n            onClick={() => updateCallback(null, null)}\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default ScenarioDetail;\r\n","import _ from 'lodash';\r\nimport { ScenarioOdds, KellyResult } from './kelly-types';\r\n\r\n/**\r\n * calcKellyBetSize: based on: https://math.stackexchange.com/a/662210\r\n * @param odds\r\n * @returns 0-100: kelly percent of capital to invest\r\n */\r\nconst calcKellyBetSize = (\r\n  odds: ScenarioOdds[]\r\n): KellyResult => {\r\n  const yCalc = (x: number) => {\r\n    return _.sum(\r\n      odds.map(\r\n        (o) =>\r\n          o.probability *\r\n          Math.log(1 + (o.payoffReturn * x) / 100)\r\n      )\r\n    );\r\n  };\r\n\r\n  const graph = _.range(0, 101).map(yCalc);\r\n\r\n  function getMaxIdx(graph: number[]) {\r\n    const max = Math.max(...graph);\r\n\r\n    const maxIdx = graph.indexOf(max);\r\n    return maxIdx;\r\n  }\r\n\r\n  const maxIdx = getMaxIdx(graph);\r\n\r\n  const maxIdx2 = getMaxIdx(\r\n    graph.map((y, i) => (i === maxIdx ? -Infinity : y))\r\n  );\r\n\r\n  const direction = maxIdx2 > maxIdx ? 1 : -1;\r\n\r\n  const graph2 = _.range(0, 9)\r\n    .map((x) => maxIdx + (direction * x) / 10)\r\n    .map(yCalc);\r\n\r\n  const decimalMaxIdx = getMaxIdx(graph2);\r\n\r\n  const y = graph2[decimalMaxIdx];\r\n\r\n  return {\r\n    betPct: maxIdx + (direction * decimalMaxIdx) / 10,\r\n    graph,\r\n    expectedPayoff: Math.pow(Math.E, y),\r\n  };\r\n};\r\n\r\nexport default calcKellyBetSize;\r\n","export function replaceItem<T>(\r\n  items: T[],\r\n  index: number,\r\n  scenario: T | null\r\n): T[] {\r\n  const [start, end] = [\r\n    [...items.slice(0, index)],\r\n    [...items.slice(index + 1)],\r\n  ];\r\n  const newItems = scenario\r\n    ? [...start, scenario, ...end]\r\n    : [...start, ...end];\r\n  return newItems;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport ScenarioDetail, {\r\n  numericScenarioDataFields,\r\n  ScenarioData,\r\n} from './scenario-detail';\r\nimport { AddCircleOutline } from '@material-ui/icons';\r\nimport './kelly.scss';\r\nimport classNames from 'classnames';\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport calcKellyBetSize from './calc/kelly-calc';\r\nimport { KellyResult } from './calc/kelly-types';\r\nimport _ from 'lodash';\r\nimport { replaceItem } from './utility';\r\nimport { ScenarioSummary } from './scenario-chooser';\r\n\r\nrequire('react-dom');\r\nconst w = window as any;\r\nw.React2 = require('react');\r\nconsole.log('React Compare', w.React1 === w.React2);\r\n\r\ninterface Props {\r\n  startScenario: ScenarioData[];\r\n  showHeader?: boolean;\r\n  useCustomStyling?: boolean;\r\n  saveCallback?: (\r\n    summary: Omit<ScenarioSummary, 'title'>\r\n  ) => void;\r\n}\r\n\r\nconst getTotalProbabilityPct = (\r\n  scenarios: ScenarioData[]\r\n) =>\r\n  _.sum(scenarios.map((s) => s.probabilityPct || 0)) || 0;\r\n\r\nconst validateSum100Pct = (scenarios: ScenarioData[]) =>\r\n  Math.abs(getTotalProbabilityPct(scenarios) - 100) < 0.01;\r\n\r\nconst validate = (scenarios: ScenarioData[]) => {\r\n  const allGood = scenarios.every(\r\n    (s) =>\r\n      typeof s.probabilityPct === 'number' &&\r\n      typeof s.expectedReturnPct === 'number' &&\r\n      s.name\r\n  );\r\n\r\n  return (\r\n    allGood &&\r\n    scenarios.length > 0 &&\r\n    validateSum100Pct(scenarios)\r\n  );\r\n};\r\n\r\nconst KellyEditor = ({\r\n  startScenario,\r\n  showHeader,\r\n  useCustomStyling,\r\n  saveCallback,\r\n}: Props) => {\r\n  const [scenarios, setScenarios] = useState(startScenario);\r\n\r\n  const [kellyResult, setKellyResult] = useState(\r\n    null as KellyResult | null\r\n  );\r\n  const [canCalc, setCanCalc] = useState(\r\n    validate(startScenario)\r\n  );\r\n  const [showErrors, setShowErrors] = useState(false);\r\n\r\n  const [startCount, setStartCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setScenarios(startScenario);\r\n    const canCalc = validate(startScenario);\r\n    setCanCalc(canCalc);\r\n    setStartCount(startCount + 1);\r\n    setKellyResult(null);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [startScenario]);\r\n\r\n  useEffect(() => {\r\n    if (canCalc) {\r\n      tryCalculate();\r\n    }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [startCount, canCalc]);\r\n\r\n  const addScenario = () => {\r\n    setScenarios([...scenarios, {}]);\r\n    setKellyResult(null);\r\n  };\r\n\r\n  const updateScenario = (\r\n    index: number,\r\n    scenario: ScenarioData | null,\r\n    updateField: keyof ScenarioData | null\r\n  ) => {\r\n    const newScenarios = replaceItem(\r\n      scenarios,\r\n      index,\r\n      scenario\r\n    );\r\n\r\n    setScenarios(newScenarios);\r\n    setCanCalc(validate(newScenarios));\r\n\r\n    if (\r\n      numericScenarioDataFields.includes(updateField!) ||\r\n      scenario === null\r\n    ) {\r\n      setKellyResult(null);\r\n    }\r\n  };\r\n\r\n  const tryCalculate = () => {\r\n    if (canCalc) {\r\n      const newKellyResult = calcKellyBetSize(\r\n        scenarios.map((s) => ({\r\n          probability: s.probabilityPct! / 100,\r\n          payoffReturn: s.expectedReturnPct! / 100,\r\n        }))\r\n      );\r\n\r\n      setKellyResult(newKellyResult);\r\n\r\n      setShowErrors(false);\r\n    } else {\r\n      setShowErrors(true);\r\n    }\r\n  };\r\n\r\n  const handleSave = () => {\r\n    saveCallback!({\r\n      ...kellyResult,\r\n      scenarioDetails: scenarios,\r\n    });\r\n  };\r\n\r\n  const totalProbabilityPct =\r\n    getTotalProbabilityPct(scenarios);\r\n\r\n  return (\r\n    <div\r\n      className={classNames('kelly-editor', {\r\n        'lib-styling': !useCustomStyling,\r\n      })}\r\n    >\r\n      {showHeader && (\r\n        <h1>Multi Kelly Criterion Calculator</h1>\r\n      )}\r\n      <div className=\"scenarioManager\">\r\n        <span title=\"add scenario\" className=\"add-scenario\">\r\n          <AddCircleOutline onClick={addScenario} />\r\n        </span>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={tryCalculate}\r\n          color={canCalc ? 'primary' : 'secondary'}\r\n          title={\r\n            canCalc\r\n              ? 'ready'\r\n              : `fix scenarios. ${\r\n                  showErrors ? '' : ' click to see errors'\r\n                }`\r\n          }\r\n        >\r\n          Calculate\r\n        </Button>\r\n        {!validateSum100Pct(scenarios) && (\r\n          <Typography color=\"secondary\">\r\n            Total probability should be 100% but is\r\n            {_.round(totalProbabilityPct, 2)}%.{' '}\r\n            <div>\r\n              Can't calculate. Please update the\r\n              probabilities.\r\n            </div>\r\n          </Typography>\r\n        )}\r\n        {kellyResult && (\r\n          <div className=\"results\">\r\n            {saveCallback && (\r\n              <Button\r\n                onClick={handleSave}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n              >\r\n                Save\r\n              </Button>\r\n            )}\r\n            <div>\r\n              <Typography>\r\n                kelly bet size: {kellyResult.betPct}%\r\n              </Typography>\r\n              <Typography>\r\n                expected return:{' '}\r\n                {_.round(\r\n                  100 * (kellyResult.expectedPayoff - 1),\r\n                  1\r\n                )}\r\n                %\r\n              </Typography>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <ol className=\"scenarios-container\">\r\n        {scenarios.map((s, i) => (\r\n          <li key={i}>\r\n            <ScenarioDetail\r\n              {...s}\r\n              showErrors={showErrors}\r\n              updateCallback={updateScenario.bind(this, i)}\r\n            />\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KellyEditor;\r\n","import { ScenarioSummary } from './scenario-chooser';\r\n\r\nexport const sampleScenarioSummaries: ScenarioSummary[] = [\r\n  {\r\n    title: 'Generous Coin Flip',\r\n\r\n    scenarioDetails: [\r\n      {\r\n        name: 'heads',\r\n        probabilityPct: 50,\r\n        expectedReturnPct: 200,\r\n      },\r\n      {\r\n        name: 'tails',\r\n        probabilityPct: 50,\r\n        expectedReturnPct: -100,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: 'Double or Nothing',\r\n    scenarioDetails: [\r\n      {\r\n        name: 'heads',\r\n        probabilityPct: 50,\r\n        expectedReturnPct: 100,\r\n      },\r\n      {\r\n        name: 'tails',\r\n        probabilityPct: 50,\r\n        expectedReturnPct: -100,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: 'Jelly Beans',\r\n\r\n    scenarioDetails: [\r\n      {\r\n        name: 'black',\r\n        probabilityPct: 70,\r\n        expectedReturnPct: -100,\r\n      },\r\n\r\n      {\r\n        name: 'blue',\r\n        probabilityPct: 20,\r\n        expectedReturnPct: 1000,\r\n      },\r\n\r\n      {\r\n        name: 'red',\r\n        probabilityPct: 10,\r\n        expectedReturnPct: 3000,\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    title: 'stock',\r\n\r\n    scenarioDetails: [\r\n      {\r\n        name: 'fraud',\r\n        probabilityPct: 5,\r\n        expectedReturnPct: -100,\r\n        description:\r\n          'Complete loss due to fraud: e.g. Enron, Luckin, Wirecard',\r\n      },\r\n\r\n      {\r\n        name: 'big miss',\r\n        probabilityPct: 10,\r\n        expectedReturnPct: -50,\r\n        description: 'something goes very wrong',\r\n      },\r\n      {\r\n        name: 'miss neg',\r\n        probabilityPct: 15,\r\n        expectedReturnPct: -15,\r\n        description: \"expectations don't pan out\",\r\n      },\r\n      {\r\n        name: 'miss even',\r\n        probabilityPct: 15,\r\n        expectedReturnPct: 0,\r\n        description: \"expectations don't pan out\",\r\n      },\r\n\r\n      {\r\n        name: 'win',\r\n        probabilityPct: 25,\r\n        expectedReturnPct: 50,\r\n        description: 'meets expectations',\r\n      },\r\n\r\n      {\r\n        name: 'big win',\r\n        probabilityPct: 20,\r\n        expectedReturnPct: 100,\r\n        description: 'exceeds expectations',\r\n      },\r\n\r\n      {\r\n        name: 'huge win',\r\n        probabilityPct: 10,\r\n        expectedReturnPct: 200,\r\n        description: 'far exceeds expectations',\r\n      },\r\n    ],\r\n  },\r\n];\r\n","import {\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { ScenarioData } from './scenario-detail';\r\n\r\nexport interface ScenarioSummary {\r\n  title: string;\r\n  betPct?: number;\r\n  expectedPayoff?: number;\r\n  scenarioDetails: ScenarioData[];\r\n}\r\n\r\ninterface Props {\r\n  summaries: ScenarioSummary[];\r\n\r\n  selectedCallback: (scenarioSummary: number) => void;\r\n  selectedIndex: number;\r\n}\r\n\r\nconst scenarioDetailsUi = (data: ScenarioData[]) => {\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>name</TableCell>\r\n            <TableCell align=\"right\" title=\"probability\">\r\n              Prob\r\n            </TableCell>\r\n            <TableCell align=\"right\" title=\"expected gain\">\r\n              Exp\r\n            </TableCell>\r\n            <TableCell>description</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map((d, i) => (\r\n            <TableRow key={i}>\r\n              <TableCell>{d.name}</TableCell>\r\n              <TableCell align=\"right\">\r\n                {d.probabilityPct}\r\n              </TableCell>\r\n              <TableCell align=\"right\">\r\n                {d.expectedReturnPct}\r\n              </TableCell>\r\n              <TableCell>{d.description}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nconst ScenarioChooser = ({\r\n  summaries,\r\n  selectedCallback,\r\n  selectedIndex,\r\n}: Props) => {\r\n  const [isSelecting, setIsSelecting] = useState(false);\r\n\r\n  const handleClick = (index: number) => {\r\n    setIsSelecting(false);\r\n    selectedCallback(index);\r\n  };\r\n\r\n  const toggleSelecting = () => {\r\n    setIsSelecting((s) => !s);\r\n  };\r\n\r\n  const SingleSummaryUi = ({\r\n    index,\r\n  }: {\r\n    index: number | null;\r\n  }) => {\r\n    const summary = summaries[index || 0];\r\n    return (\r\n      <>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={toggleSelecting}\r\n          disabled={isSelecting}\r\n        >\r\n          Select a scenario\r\n        </Button>\r\n\r\n        {index !== null && !isSelecting && (\r\n          <TableContainer\r\n            component={Paper}\r\n            className=\"lib-styling scenario-chooser-list\"\r\n          >\r\n            <Table size=\"small\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>scenarios</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                <TableRow\r\n                  key={index}\r\n                  onClick={() => handleClick(index)}\r\n                >\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {summary.title}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {scenarioDetailsUi(\r\n                      summary.scenarioDetails\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SingleSummaryUi index={selectedIndex} />\r\n\r\n      {isSelecting && (\r\n        <TableContainer\r\n          component={Paper}\r\n          className=\"lib-styling scenario-chooser-list\"\r\n        >\r\n          <Table size=\"small\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Name</TableCell>\r\n                <TableCell>scenarios</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody className=\"outer-container\">\r\n              {summaries.map((sum, i) => (\r\n                <TableRow\r\n                  key={i}\r\n                  onClick={() => handleClick(i)}\r\n                  selected={(selectedIndex || 0) === i}\r\n                >\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {sum.title}\r\n                  </TableCell>\r\n\r\n                  <TableCell>\r\n                    {scenarioDetailsUi(sum.scenarioDetails)}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScenarioChooser;\r\n","import React, { useEffect, useState } from 'react';\r\nimport KellyEditor from './kelly-editor';\r\nimport { sampleScenarioSummaries } from './sample-data';\r\nimport ScenarioChooser, {\r\n  ScenarioSummary,\r\n} from './scenario-chooser';\r\nimport { replaceItem } from './utility';\r\n\r\nconst App = () => {\r\n  const [summaries, setSummaries] = useState(\r\n    sampleScenarioSummaries\r\n  );\r\n\r\n  const [selectedSummaryIdx, setSelectedSummaryIdx] =\r\n    useState(0);\r\n\r\n  useEffect(() => {\r\n    document.title = 'MultiKelly';\r\n  }, []);\r\n\r\n  const handleScenarioSelection = (index: number) => {\r\n    setSelectedSummaryIdx(index);\r\n  };\r\n\r\n  const saveHandler = (\r\n    summary: Omit<ScenarioSummary, 'title'>\r\n  ) => {\r\n    if (selectedSummaryIdx) {\r\n      const fullSummary = {\r\n        ...summaries[selectedSummaryIdx],\r\n        summary,\r\n      };\r\n\r\n      setSummaries(\r\n        replaceItem(\r\n          summaries,\r\n          selectedSummaryIdx,\r\n          fullSummary\r\n        )\r\n      );\r\n    } else {\r\n      setSummaries([\r\n        ...summaries,\r\n        {\r\n          title: new Date().toLocaleString(),\r\n          ...summary,\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const startScenario =\r\n    summaries[selectedSummaryIdx].scenarioDetails;\r\n  return (\r\n    <div>\r\n      <ScenarioChooser\r\n        summaries={summaries}\r\n        selectedCallback={handleScenarioSelection}\r\n        selectedIndex={selectedSummaryIdx}\r\n      />\r\n      <KellyEditor\r\n        showHeader={true}\r\n        startScenario={startScenario}\r\n        saveCallback={saveHandler}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}